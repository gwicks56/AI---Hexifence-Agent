##############################################################################
* KEYWORDS
##############################################################################

DOUBLE-DEALING:
This is a situation which occurs when a hexagon having only one free edge 
(edge A) is adjacent to another hexagon with 2 free edges (edge A and edge B) 
but edge B is NOT shared with any hexagon with less than 3 free edges. 
In this case a player has two options:

1) Normal Play: Capture the two hexagons by marking edge A and then edge B and 
make the third move.

2) Sacrifice/Double-deal: Mark edge B only. If the opposing player marks 
edge A then he captures the two hexagons but he also has to make the third 
move.


EXAMPLE OF SACRIFICING USING SQUARE GAME ( EASIER TO DRAW IN ASCII )

---------------------------
|x|x|x|x|x|x|x|x|x|x|     | - Make final move at end of chain leaving two spare uncaptured hexagons, meaning opponent can only capture those two hexagons,
---------------------------   rather than the entire next chain.



------------------------------------------------------------------------------
CHAIN:
Chains are sequences of adjacent hexagons with 4 sides captured. If one of the 
edges of a chain is marked by a player, the opposing player can capture all of 
the hexagons of the chain. Chains are of various types. They are as follows:

1) Long chains: These are chains of two or more hexagons in which 
double-dealing is possible.

2) Non-double-dealing chains: 
  a) Single-hexagon chain: This is a chain with only one hexagon. 
     Double dealing is not possible.

  b) Y-shaped chain: This is a circular closed chain of 3 hexagons arranged 
     in a Y-shape in which double dealing is not possible

    / \
   |   |
  / \ / \     - Y-shaped ( 3 hexagons )       - Sacrifice not possible
 |   |   |
  \ / \ /




  c) X-shaped chain: This is a circular closed chain of 4 hexagons arranged 
     in an X-shape in which double dealing is not possible. 


    / \
   |   |
  / \ / \     - X-shaped ( 4 hexagons )      - Sacrifice not possible
 |   |   |
  \ / \ /
   |   |
    \ /



------------------------------------------------------------------------------
CAPTURE MOVE:
If an edge is shared with any hexagon with only one free edge, then its a 
capture move because marking this edge captures at least one hexagon.

------------------------------------------------------------------------------
SAFE MOVE:
When such an edge is marked, no hexagons are captured and the number of 
Capture Moves remain the same as well. So opponent always gets the next turn 
and he/she does not get any extra hexagon to capture.


##############################################################################
* STRUCTURE
##############################################################################  

Our Project uses basic Java libraries, including:
Point, ArrayList, HashMap, Iterator, Point, Random and Scanner

The structure of our program is 4 main classes:

EDGE 	: 	data structure to hold information about each hexagon edge
		( captured, color, parents etc)

HEXAGON : 	data structure to hold information about each hexagon ( captured, 
		color, edges, adjacent hexagons)

CHAIN 	: 	data structure to hold information about chains of hexagons. A 
		chain of hexagons is a series of hexagons whereby if one gets
		captured they all get captured. In our experimentation chains 
		were the single most important thing in determining the winner.
		Chains can be y-shaped, x-shaped, or sequential with various lengths. 

MOVEFINDER : 	where the game logic is. In this class our program evaluates the board 
		layout, determines free moves ( moves which dont give up a hexagon for 
		opponent to capture), single capture moves and chain capture moves. It 
		is here it evaluates which chains are left, which ones we can win, which 
		ones opponent is likely to win, and determines whether or not to sacrifice
		 some hexagons now to win more later.



Our approach to building the best AI player we could was to first play the game many times 
ourselves, trying to find the best game plan. We quickly realised that the winner or loser 
was almost always determined by who won the most long chains of hexagons ( ie, after winning one
hexagon, you then win the next, and the next etc). On further play, we realised that the person 
filling in a long chain, could sacrifice the final two hexagons, in order to be in control for the 
next chain.

Thus our strategy became one of recognising chains, counting and assessing each one, then 
determining whether or not sacrificing some hexagons at the end of a chain would increase
 or decrease our expected score.

So our strategy was broadly broken down into four phases:

PHASE 1:
Beginning of game. No hexagons available for capture. Here our AI simply chooses a edge 
at random, making sure it does not give opponent the opportunity to score. This random 
edge selection continues until the board is getting filled.

PHASE 2:
Middle of game. Some hexagons available for capture, free moves still available. Here 
our AI will capture any hexagons that can be captured, then make sure to make next move 
in such a way as to not give opponent and opportunity to score.

PHASE 3:
End phase 1 of game. Hexagons available for capture, no free moves available. Here is 
where our AI starts to consider it's moves more carefully.
First it will take any available hexagons for capture, then it looks at which move will 
give the opponent the lease amount of hexagons. Ie if possible it will give up a single 
hexagon, or a double chain, or triple etc. The aim being to capture as many hexagons as 
possible, whilst making sure opponent does not get a long chain.
In order to do this effectively, we look ahead until the end of the game, and see which 
sequence of moves would result in the greatest number of points for
our AI, and least for opponent. It accomplishes this by knowing that 
we can't sacrifice hexagons to regain control on x-shaped, y-shaped 
and single chains, so those are put in a queue with the smallest at the front. We then 
simulate each players moves, ie one player gets one chain, other player gets next chain,
until the queue is empty and we can move onto the long chains where sacrificing is possible. 

PHASE 4:
End phase 2 of game. Nothing but chains left. This is the point of the game where in our 
play the winner was usually decided. The player who captures  the most long chains wins, 
and can quickly rack up a large score compared to opponent. 
Here our AI needs to classify each chain in to its various types:
open ended, closed ended, y-shape, x-shape, 1, 2, 3, 4..... hexagons long. Once the hexagons 
are all classified, our AI captures as many hexagons as it can, with the exception of the final 
two. It then works out how long the smallest chain it can give to the opponent is. If the smallest 
chain for opponent  is longer than 2, our AI will sacrifice the final hexagons in our chain. 
This means the longest chain the opponent can claim is the two hexagons we sacrificed, and then t
hey must start a chain which is at least 3 hexagons long for us to capture. 



********************
	NOTE
********************

Our strategy performs best the larger the dimensions of the board, ie it performs much better on 
n=3 than n=2, and even better on n=4. This is because the larger the board, the longer the chains 
that become available at the end of the game.